version: '3.8'
services:
  db-userauth:
    image: "mysql/mysql-server:8.0"
    container_name: db-userauth
    command: [ "mysqld",
      "--character-set-server=utf8mb4",
      "--bind-address=0.0.0.0",
      "--socket=/tmp/mysql.sock" ]
    expose:
      - "3306"
    networks:
      - authnet
    volumes:
      # - db-userauth-data:/var/lib/mysql
      - type: bind
        source: /data/users
        target: /var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: "rootPass"
      MYSQL_USER: userauth
      MYSQL_PASSWORD: userPass
      MYSQL_DATABASE: userPass
    deploy:
      replicas: 1
      placement:
        constraints:
          # - "node.hostname==notes-private-db1"
          # To set a label on a Docker swarn node, we run the following command
          # docker node update --label-add type=public notes-public
          - "node.labels.type==db"
      
  svc-userauth:
    build: ../users
    #image: AMAZONACCT.dkr.ecr.us-west-1.amazonaws.com/svc-userauth
    container_name: svc-userauth
    depends_on:
      - db-userauth
    networks:
      - authnet
    # DO NOT EXPOSE THIS PORT ON PRODUCTION
    ports:
      - "5858:5858"
    restart: always
    deploy:
      replicas: 1
      placement:
        constraints:
          - "node.labels.type==svc"

  db-notes:
    image: "mysql/mysql-server:8.0"
    container_name: db-notes
    command: [  "mysqld",
      "--character-set-server=utf8mb4",
      "--collation-server=utf8mb4_unicode_ci",
      "--bind-address=0.0.0.0",
      "--socket=/tmp/mysql.sock" ]
    expose:
      - "3306"
    networks:
      - frontnet
    volumes:
      # - db-notes-data:/var/lib/mysql
      - type: bind
        source: /data/notes
        target: /var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: "rootPass"
      MYSQL_USER: notes
      MYSQL_PASSWORD: userPass
      MYSQL_DATABASE: notes
    deploy:
      replicas: 1
      placement:
          constraints:
            - "node.labels.type==db"

  svc-notes:
    build: ../notes
    image: AMZACCT.dkr.ecr.us-west-1.amazonaws.com/svc-notes
    container_name: svc-notes
    depends_on:
      - db-notes
      - redis
    networks:
      - frontnet
      - authnet
    ports:
      - "3000:3000"
    restart: always
    environment:
      REDIS_ENDPOINT: "redis"
      TWITTER_CALLBACK_HOST: "http://mnotask.com"
      TWITTER_CONSUMER_KEY_FILE: /var/run/secrets/TWITTER_CONSUMER_KEY
      TWITTER_CONSUMER_SECRET_FILE: /var/run/secrets/TWITTER_CONSUMER_SECRET
      SEQUELIZE_CONNECT: models/sequelize-docker-mysql.yaml
      SEQUELIZE_DBHOST: db-notes
      NOTES_MODEL: sequelize
    deploy:
      replicas: 1
      placement:
        constraints:
          - "node.labels.type==public"
    secrets:
      - TWITTER_CONSUMER_KEY
      - TWITTER_CONSUMER_SECRET
    dns:
      - 8.8.8.8
      - 9.9.9.9

  redis:
    image: "redis:5.0"
    networks:
      - frontnet
    deploy:
      replicas: 1
      placement:
        constraints:
          - "node.labels.type!=public"    

  cronginx:
    image: robogeek/cronginx
    container_name: cronginx
    deploy:
      replicas: 1
      placement:
        constraints:
          - "node.labels.type==public"
    networks:
      - frontnet
    ports:
      - 80:80
      - 443:443
    dns:
      - 8.8.8.8
      - 9.9.9.9
    restart: always
    volumes:
      - type: bind
        source: /home/ubuntu/etc-letsencrypt
        target: /etc/letsencrypt
      - type: bind
        source: /home/ubuntu/webroots
        target: /webroots
      - type: bind
        source: /home/ubuntu/nginx-conf-d
        target: /etc/nginx/conf.d



networks:
  frontnet:
    # driver: bridge
    driver: overlay
  authnet:
    # driver: bridge
    driver: overlay
    
#volumes:
#  db-userauth-data:
#  db-notes-data:
  
secrets:
  TWITTER_CONSUMER_KEY:
    external: true
  TWITTER_CONSUMER_SECRET:
    external: true



